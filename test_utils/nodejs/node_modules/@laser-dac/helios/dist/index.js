"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helios = void 0;
const core_1 = require("@laser-dac/core");
const heliosLib = require("./HeliosLib");
const convert_1 = require("./convert");
// This controls the intensity signal of points written to the DAC.
// For many laser projectors this won't make a difference, but some projectors map this to the shutter so the laser won't turn on if we don't pass the max value.
const INTENSITY = 255;
const MAX_POINTS = 4094;
class Helios extends core_1.Device {
    async start() {
        this.stop();
        const devices = heliosLib.openDevices();
        if (devices) {
            heliosLib.setShutter(0, true);
            return true;
        }
        return false;
    }
    stop() {
        heliosLib.setShutter(0, false);
        heliosLib.closeDevices();
        if (this.interval) {
            clearInterval(this.interval);
        }
    }
    convertPoint(p) {
        return {
            x: (0, convert_1.relativeToPosition)(p.x),
            y: (0, convert_1.relativeToPosition)(p.y),
            r: (0, convert_1.relativeToColor)(p.r),
            g: (0, convert_1.relativeToColor)(p.g),
            b: (0, convert_1.relativeToColor)(p.b),
            i: INTENSITY,
        };
    }
    stream(scene, pointsRate, fps) {
        this.interval = setInterval(() => {
            if (!scene.points.length) {
                return;
            }
            if (heliosLib.getStatus(0) !== 1) {
                return;
            }
            const points = scene.points.map(this.convertPoint).slice(0, MAX_POINTS);
            heliosLib.writeFrame(0, pointsRate, 0, points, points.length);
        }, 1000 / fps);
    }
}
exports.Helios = Helios;
