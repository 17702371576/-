"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromByteArray = void 0;
const file_1 = require("./file");
const color_1 = require("./color");
const ArrayReader_1 = require("./ArrayReader");
function fromByteArray(arr) {
    const sections = [];
    const p = new ArrayReader_1.ArrayReader(arr);
    while (!p.eof()) {
        // read frame.
        const head = p.readString(4);
        if (head != 'ILDA')
            break;
        const section = {
            name: '',
            type: p.readLong(),
            points: [],
            colors: [],
        };
        switch (section.type) {
            case file_1.SectionTypes.THREE_DIMENSIONAL:
                const pointLength = readHeader(p, section);
                for (let i = 0; i < pointLength; i++) {
                    const x = p.readSignedShort();
                    const y = p.readSignedShort();
                    // TODO: does it work like this?
                    const z = p.readSignedShort();
                    const rgb = (0, color_1.parseColor)(p.readShort());
                    const point = {
                        x,
                        y,
                        z,
                        r: rgb.r,
                        g: rgb.g,
                        b: rgb.b,
                    };
                    section.points.push(point);
                }
                break;
            case file_1.SectionTypes.TWO_DIMENSIONAL:
                const pointLength2 = readHeader(p, section);
                for (let i = 0; i < pointLength2; i++) {
                    const x = p.readSignedShort();
                    const y = p.readSignedShort();
                    const rgb = (0, color_1.parseColor)(p.readShort());
                    const point = {
                        x,
                        y,
                        r: rgb.r,
                        g: rgb.g,
                        b: rgb.b,
                    };
                    section.points.push(point);
                }
                break;
            case file_1.SectionTypes.COLOR_TABLE:
                const colorLength = readHeader(p, section);
                for (let i = 0; i < colorLength; i++) {
                    const color = {
                        r: p.readByte(),
                        g: p.readByte(),
                        b: p.readByte(),
                    };
                    section.colors.push(color);
                }
                break;
            case file_1.SectionTypes.TRUECOLOR_TABLE:
                // truecolor points
                // const _len = p.readLong();
                const np = p.readLong();
                for (let i = 0; i < np; i++) {
                    const color = {
                        r: p.readByte(),
                        g: p.readByte(),
                        b: p.readByte(),
                    };
                    section.colors.push(color);
                }
                break;
            case file_1.SectionTypes.TREE_DIMENSIONAL_TRUECOLOR:
                const pointLength3 = readHeader(p, section);
                for (let i = 0; i < pointLength3; i++) {
                    const x = p.readSignedShort();
                    const y = p.readSignedShort();
                    const z = p.readSignedShort();
                    p.readByte();
                    const b = p.readByte();
                    const g = p.readByte();
                    const r = p.readByte();
                    const point = {
                        x,
                        y,
                        z,
                        r,
                        g,
                        b,
                    };
                    section.points.push(point);
                }
                break;
            case file_1.SectionTypes.TWO_DIMENSIONAL_TRUECOLOR:
                const pointLength4 = readHeader(p, section);
                for (let i = 0; i < pointLength4; i++) {
                    const x = p.readSignedShort();
                    const y = p.readSignedShort();
                    p.readByte();
                    const b = p.readByte() / 255;
                    const g = p.readByte() / 255;
                    const r = p.readByte() / 255;
                    const point = {
                        x,
                        y,
                        r,
                        g,
                        b,
                    };
                    section.points.push(point);
                }
                break;
        }
        sections.push(section);
    }
    return sections;
}
exports.fromByteArray = fromByteArray;
function readHeader(p, section) {
    section.name = p.readString(8);
    section.company = p.readString(8);
    const length = p.readShort();
    p.readShort(); // this is the `index`, but we ignore that for now
    section.total = p.readShort();
    section.head = p.readByte();
    p.readByte();
    return length;
}
