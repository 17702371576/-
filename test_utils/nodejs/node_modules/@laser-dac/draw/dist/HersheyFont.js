"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadHersheyFont = exports.HersheyFont = void 0;
const fs = require("fs");
const Path_1 = require("./Path");
// Render text using hershey font
class HersheyFont {
    constructor(options) {
        this.x = options.x;
        this.y = options.y;
        this.font = options.font;
        this.charWidth = options.charWidth;
        this.spacingFactor = options.spacingFactor || 1.0;
        this.text = options.text;
        this.color = options.color;
    }
    draw(resolution) {
        const paths = [];
        let xpos = 0;
        for (let i = 0; i < this.text.length; i++) {
            const characterIndex = this.text.charCodeAt(i) - 32;
            if (characterIndex < 0 || characterIndex >= this.font.length) {
                continue;
            }
            paths.push(convertHersheyToPath(this.font[characterIndex], xpos - this.font[characterIndex].leftPos, 5, this.charWidth / 10));
            xpos +=
                (this.font[characterIndex].rightPos -
                    this.font[characterIndex].leftPos) *
                    this.spacingFactor;
        }
        if (paths.length === 0) {
            return [];
        }
        return new Path_1.Path({
            x: this.x,
            y: this.y,
            color: this.color,
            path: paths.join(' '),
        }).draw(resolution);
    }
}
exports.HersheyFont = HersheyFont;
// Load Hershey .jhf file. See https://emergent.unpythonic.net/software/hershey for source files
// futural.jhf is a good candidate as it is a single stroke sans-serif font
function loadHersheyFont(path) {
    const fontFile = fs.readFileSync(path, 'binary');
    const characters = [];
    let readPos = 0;
    function readNextCharacter() {
        // 0-4 number (not used)
        // 5-7 number of vertices
        // 8   left pos
        // 9   right pos
        // 10- vertices
        // newline
        const vertexCount = Number.parseInt(fontFile.substr(readPos + 5, 3), 10);
        const leftPos = hersheyCharToNumber(fontFile.charAt(readPos + 8));
        const rightPos = hersheyCharToNumber(fontFile.charAt(readPos + 9));
        const vertices = [];
        readPos += 10;
        while (vertices.length < vertexCount - 1) {
            let vertex = '';
            for (let i = 0; i < 2; i++) {
                while (fontFile.charAt(readPos) === '\n') {
                    readPos++;
                }
                vertex += fontFile.charAt(readPos);
                readPos++;
            }
            vertices.push(vertex);
        }
        readPos++;
        return {
            leftPos,
            rightPos,
            vertexCount,
            vertices,
        };
    }
    while (readPos < fontFile.length) {
        characters.push(readNextCharacter());
    }
    return characters;
}
exports.loadHersheyFont = loadHersheyFont;
function hersheyCharToNumber(char) {
    return char.charCodeAt(0) - 'R'.charCodeAt(0);
}
function convertHersheyToPath(character, x, y, scale) {
    const pathElements = [];
    let nextIsMove = true;
    for (let i = 0; i < character.vertices.length; i++) {
        const vertice = character.vertices[i];
        if (vertice === ' R') {
            nextIsMove = true;
            continue;
        }
        const vertexX = (x + hersheyCharToNumber(vertice.charAt(0))) * scale;
        const vertexY = (y + hersheyCharToNumber(vertice.charAt(1))) * scale;
        pathElements.push(`${nextIsMove ? 'M' : 'L'} ${vertexX},${vertexY}`);
        nextIsMove = false;
    }
    return pathElements.join(' ');
}
