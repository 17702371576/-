"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Circle = void 0;
const Shape_1 = require("./Shape");
const Point_1 = require("./Point");
const Wait_1 = require("./Wait");
const constants_1 = require("./constants");
class Circle extends Shape_1.Shape {
    constructor(options) {
        super();
        this.x = options.x;
        this.y = options.y;
        this.radius = options.radius;
        this.color = options.color;
    }
    draw(resolution) {
        const circumference = 2.0 * this.radius * Math.PI;
        const pointCount = Math.round(circumference * resolution);
        const points = new Wait_1.Wait({
            x: this.x + this.radius,
            y: this.y,
            color: [0, 0, 0],
            amount: constants_1.BLANKING_AMOUNT,
        }).draw();
        // If there are less then 3 points just return blank
        if (pointCount < 3) {
            return points;
        }
        const stepSize = (Math.PI * 2) / pointCount;
        for (let i = 0.0; i < Math.PI * 2; i += stepSize) {
            points.push(new Point_1.Point(this.x + this.radius * Math.cos(i), this.y + this.radius * Math.sin(i), this.color));
        }
        // Close circle
        points.push(new Point_1.Point(this.x + this.radius, this.y, this.color));
        // Blank after
        return points.concat(new Wait_1.Wait({
            x: this.x + this.radius,
            y: this.y,
            color: [0, 0, 0],
            amount: constants_1.BLANKING_AMOUNT,
        }).draw());
    }
}
exports.Circle = Circle;
