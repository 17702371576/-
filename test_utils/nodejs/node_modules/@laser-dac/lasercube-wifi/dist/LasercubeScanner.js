"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LasercubeScanner = void 0;
const _1 = require(".");
const data_1 = require("./data");
const LasercubeDevice_1 = require("./LasercubeDevice");
class LasercubeScanner {
    constructor(cmdSocket, dataSocket) {
        this.cmdSocket = cmdSocket;
        this.dataSocket = dataSocket;
    }
    async search(timeout) {
        return new Promise((resolve) => {
            const timeoutTimer = setTimeout(() => {
                this.stop();
                resolve(null);
            }, timeout);
            this.listenerFunction = (msg, rinfo) => {
                if (msg[0] === data_1.Command.GetFullInfo && msg.length > 1) {
                    clearTimeout(timeoutTimer);
                    this.stop();
                    const device = new LasercubeDevice_1.LasercubeDevice(rinfo.address, this.cmdSocket, this.dataSocket);
                    device.handleCmdMessage(msg, rinfo);
                    resolve(device);
                }
            };
            this.cmdSocket.on('message', this.listenerFunction);
            // All lasers in the network will respond to this message by sending their full information
            this.sendFullInfoMsg();
        });
    }
    /**
     * Send a message asking for all the information about the laser
     */
    sendFullInfoMsg() {
        const msg = Buffer.from([data_1.Command.GetFullInfo]);
        this.cmdSocket.send(msg, _1.LasercubeWifi.cmdPort, '255.255.255.255');
    }
    stop() {
        if (this.listenerFunction) {
            this.cmdSocket.off('message', this.listenerFunction);
        }
    }
}
exports.LasercubeScanner = LasercubeScanner;
