/// <reference types="node" />
import * as dgram from 'dgram';
import { DeviceInfo } from './data';
declare type BufferFrame = Buffer[];
declare type StreamFrameCallback = () => BufferFrame;
export declare class LasercubeDevice {
    address: string;
    cmdSocket: dgram.Socket;
    dataSocket: dgram.Socket;
    running: boolean;
    remoteBufFree: number;
    dacRate: number;
    info: DeviceInfo | null;
    constructor(address: string, cmdSocket: dgram.Socket, dataSocket: dgram.Socket);
    handleCmdMessage: (msg: Buffer, rinfo: dgram.RemoteInfo) => void;
    handleDataMessage: (msg: Buffer, rinfo: dgram.RemoteInfo) => void;
    stop(): void;
    private sendCommand;
    messageNum: number;
    frameNum: number;
    start(): void;
    streamFrames(dacRate: number, callback: StreamFrameCallback): void;
    streamCallback: StreamFrameCallback | null;
    run: () => Promise<void>;
}
export {};
