/// <reference types="node" />
import * as net from 'net';
import { parseStandardResponse } from './parse';
declare type HandlerCallbackFn = (data: number[]) => void;
declare type pstdReturnType = ReturnType<typeof parseStandardResponse>;
export interface IPoint {
    x: number;
    y: number;
    r: number;
    g: number;
    b: number;
    control?: number;
    i?: number;
    u1?: number;
    u2?: number;
}
export declare type StreamSourceFn = (numpoints: number, pointcallback: (points: IPoint[]) => void) => void;
declare type FrameSourceFn = (callback: (points: IPoint[]) => void) => void;
declare type NoOpFn = () => void;
export declare class EtherConn {
    client?: net.Socket;
    inputqueue: number[];
    inputhandlerqueue: {
        size: number;
        callback: HandlerCallbackFn;
    }[];
    timer: number;
    acks: number;
    fullness: number;
    points_in_buffer: number;
    playback_state: number;
    playsent: boolean;
    beginsent: boolean;
    preparesent: boolean;
    valid: boolean;
    rate?: number;
    streamSource?: StreamSourceFn;
    frameSource?: FrameSourceFn;
    frameBuffer?: IPoint[];
    ip?: string;
    port?: number;
    _send(sendcommand: string): void;
    _popinputqueue(): void;
    connect(ip: string, port: number): Promise<unknown>;
    reconnect(): Promise<unknown>;
    waitForResponse(size: number, callback: HandlerCallbackFn): void;
    sendPrepare(callback: NoOpFn): void;
    handleStandardResponse(data: pstdReturnType): void;
    sendBegin(rate: number, callback: NoOpFn): void;
    sendUpdate(rate: number, callback: NoOpFn): void;
    sendStop(callback: NoOpFn): void;
    sendEmergencyStop(callback: NoOpFn): void;
    sendPing(callback: NoOpFn): void;
    sendPoints(points: IPoint[], callback: NoOpFn): void;
    pollGotData(framedata: IPoint[]): void;
    pollStream(): void;
    streamPoints(rate: number, pointSource: StreamSourceFn): void;
    streamFrames(rate?: number, frameSource?: FrameSourceFn): void;
    close(): void;
}
export {};
