import { EtherConn, StreamSourceFn, IPoint } from './EtherConn';
import { Device } from '@laser-dac/core';
export interface IDevice {
    ip: string;
    port: number;
    name: string;
    hw_revision: number;
    sw_revision: number;
}
export declare class EtherDream extends Device {
    connection?: EtherConn;
    static _find: (limit: number, timeout: number) => Promise<IDevice[]>;
    static find: () => Promise<IDevice[]>;
    static findFirst: () => Promise<IDevice[]>;
    static connect: (ip: string, port: number) => Promise<EtherConn | null>;
    search(): Promise<IDevice>;
    start(): Promise<boolean>;
    stop(): void;
    private convertPoint;
    stream(scene: {
        points: IPoint[];
    }, pointsRate?: number): void;
}
export { EtherConn, StreamSourceFn, IPoint };
